// Ch1: Introduction to Java Programming
/*
 * Java is a high-level, class-based, object-oriented programming language. It is renowned for its portability across platforms, thanks to the Java Virtual Machine (JVM)
 */

 /*
  * Short History of Java:
  * - Developed by Sun Microsystems in the mid-1990s. 
  * - Initially designed for interactive television, but later adapted for web applications.
  * - Currently maintained by Oracle Corporation.
  */

/* 
 * Java Buzzwords:
 * 1. Simple: Java's syntax is easy to learn and use.
 * 2. Object-Oriented: Java is based on the concept of objects.
 * 3. Platform-Independent: Java code can run on any device that has a JVM.
 * 4. Secure: Java provides a secure environment for developing applications.
 * 5. Portable: Java applications can be moved from one platform to another without modification.
 * 6. Dynamic: Java can adapt to changing environments and supports dynamic loading of classes.
 */

 /*
  * The Java Virtual Machine (JVM):
  * - An abstract machine that enables a computer to run Java programs.
  * - Converts Java bytecode into machine code.
  * - Provides a runtime environment for Java applications.
  * - Allows Java to be run on any device or OS that has a JVM installed.
  */

/*
 * Java Runtime Environment (JRE):
 * - A part of the Java Development Kit (JDK) that provides libraries and other components
 *   necessary to run Java applications.
 * - Includes the JVM, core libraries, and other components.
 */

 /*
  * Bytecode
  * - It is the platform-independent code generated by the Java compiler.

    Java Source Code (.java files) -> Bytecodes (.class files) -> JVM -> Machine Code

  */

  /*
   * OOP and its principles:
   * - Object-Oriented Programming (OOP) is a programming paradigm based on the concept
   *   of "objects", which can contain data and code.
   * - Key principles of OOP include:
   *   1. Encapsulation: Bundling data and methods into a single unit called class.
   *   2. Inheritance: Mechanism to create new classes based on existing classes. It promotes code reusability.
   *   3. Polymorphism: Ability to process objects differently based on their data type or class.
   *   4. Abstraction: Hiding complex implementation details and showing only the essential features of the object.
   * - OOP helps in organizing code, making it more modular, reusable, and easier to maintain.
   */

   /* 
    * Writing, Compiling, and Running a Java Program:
    * A simple Hello World program in Java:
    */

public class Ch1 {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}

/*
 * Writing Output:
 * - The `System.out.println()` method is used to print text to the console.
 * - It can print strings, numbers, and other data types.
 */

/*
 * Reading Input:
 * - Java provides the `Scanner` class for reading input from various sources, including keyboard input.
 * - Example:
 */

 import java.util.Scanner;
 public class InputExample {
     public static void main(String[] args) {
         Scanner scanner = new Scanner(System.in); // Takes the input 
         System.out.print("Enter your name: ");
         String name = scanner.nextLine(); // Stores input in name variable
         System.out.println("Hello, " + name + "!"); // Prints the input
         scanner.close();
     }
 }


 